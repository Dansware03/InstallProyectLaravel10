<?php

namespace dansware03\laravelinstaller\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use dansware03\laravelinstaller\InstallerManager;

class ResetInstallCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'installer:reset';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Reset the installation status';

    /**
     * The installer manager instance.
     *
     * @var InstallerManager
     */
    protected $installer;

    /**
     * Create a new command instance.
     */
    public function __construct(InstallerManager $installer)
    {
        parent::__construct();
        $this->installer = $installer;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('Resetting Laravel Installer status and project state...');

        // 1. Eliminar el archivo de bloqueo de instalación
        $lockFile = config('installer.installer_lock_file', storage_path('installed'));
        if (File::exists($lockFile)) {
            File::delete($lockFile);
            $this->line('<fg=green>[✔]</> Installation lock file removed.');
        } else {
            $this->line('<fg=yellow>[INFO]</> No installation lock file found.');
        }

        // 2. Restaurar .env desde .env.example
        $envPath = base_path('.env');
        $envExamplePath = base_path('.env.example');

        if (File::exists($envExamplePath)) {
            try {
                File::copy($envExamplePath, $envPath);
                $this->line('<fg=green>[✔]</> .env file has been reset from .env.example.');

                // 3. Generar nueva APP_KEY
                $this->call('key:generate', ['--force' => true]);

                // Verificar si la APP_KEY fue realmente escrita y no está vacía
                $envContent = File::get($envPath);
                if (preg_match('/^APP_KEY=(.+)$/m', $envContent, $matches) && !empty(trim($matches[1])) && strlen(trim($matches[1])) > 16 ) { // Verifica que no esté vacía y tenga una longitud razonable
                    $this->line('<fg=green>[✔]</> New APP_KEY generated and verified in .env file.');
                } else {
                    $this->error('[✘] APP_KEY generation may have failed. APP_KEY is missing, empty, or too short in .env file.');
                    $this->warn('   Please check file permissions for ".env" or run "php artisan key:generate" manually.');
                }

            } catch (\Exception $e) {
                $this->error('[✘] Failed to reset .env file or generate/verify APP_KEY: ' . $e->getMessage());
            }
        } else {
            $this->warn('[!] .env.example not found. Skipping .env reset and key generation.');
        }

        // 4. Restaurar routes/api.php y asegurar su existencia
        $apiRoutesPath = base_path('routes/api.php');
        $disabledApiRoutesPath = base_path('routes/api.php.disabled');
        $apiRoutesFileEnsured = false;

        if (File::exists($disabledApiRoutesPath)) {
            try {
                File::move($disabledApiRoutesPath, $apiRoutesPath);
                $this->line('<fg=green>[✔]</> routes/api.php has been restored from .disabled file.');
                $apiRoutesFileEnsured = true;
            } catch (\Exception $e) {
                $this->error('[✘] Failed to restore routes/api.php from .disabled file: ' . $e->getMessage());
            }
        } elseif (File::exists($apiRoutesPath)) {
            $this->line('<fg=yellow>[INFO]</> routes/api.php already exists. No .disabled version found to restore.');
            $apiRoutesFileEnsured = true;
        }

        if (!$apiRoutesFileEnsured) {
            try {
                $placeholderContent = "<?php" . PHP_EOL . PHP_EOL .
                                  "use Illuminate\Http\Request;" . PHP_EOL .
                                  "use Illuminate\Support\Facades\Route;" . PHP_EOL . PHP_EOL .
                                  "// routes/api.php (auto-generated by installer:reset)" . PHP_EOL . PHP_EOL .
                                  "Route::middleware('auth:sanctum')->get('/user', function (Request $request) {" . PHP_EOL .
                                  "    return $request->user();" . PHP_EOL .
                                  "});" . PHP_EOL;
                File::put($apiRoutesPath, $placeholderContent);
                $this->line('<fg=green>[✔]</> Placeholder routes/api.php file created as it was missing.');
                $apiRoutesFileEnsured = true;
            } catch (\Exception $e) {
                $this->error('[✘] Failed to create a placeholder routes/api.php: ' . $e->getMessage());
            }
        }
        
        // 5. Restaurar bootstrap/app.php (revertir comentario de API)
        // Solo si nos aseguramos de que routes/api.php existe.
        $bootstrapPath = base_path('bootstrap/app.php');
        if ($apiRoutesFileEnsured && File::exists($bootstrapPath)) {
            try {
                $content = File::get($bootstrapPath);
                // La expresión regular busca el comentario y la línea original, capturando la indentación.
                // Esto hace la restauración de la indentación más robusta.
                $pattern = '/(\s*)\/\/ API disabled by installer\s*(\r\n|\r|\n)\s*(->withRouting\()/m';

                if (preg_match($pattern, $content, $matches)) {
                    // $matches[1] es la indentación original (espacios/tabs) de la línea comentada.
                    // $matches[3] es '->withRouting('
                    $originalLineWithCorrectIndentation = $matches[1] . $matches[3];
                    $content = preg_replace($pattern, $originalLineWithCorrectIndentation, $content, 1);
                    File::put($bootstrapPath, $content);
                    $this->line('<fg=green>[✔]</> API routing in bootstrap/app.php has been re-enabled.');
                } else {
                    $this->line('<fg=yellow>[INFO]</> API routing in bootstrap/app.php was not found to be disabled by the installer or already re-enabled.');
                }
            } catch (\Exception $e) {
                $this->error('[✘] Failed to modify bootstrap/app.php: ' . $e->getMessage());
            }
        } elseif (File::exists($bootstrapPath) && !$apiRoutesFileEnsured) {
            $this->warn('[!] Skipped re-enabling API routing in bootstrap/app.php because routes/api.php could not be ensured.');
        } elseif (!File::exists($bootstrapPath)) {
            $this->warn('[!] bootstrap/app.php not found. Skipping API routing modification.');
        }

        // 6. Limpiar cachés de optimización
        try {
            $this->line('<fg=cyan>[INFO]</> Clearing all optimized caches (config, route, view, etc.)...');
            $this->call('optimize:clear');
            $this->line('<fg=green>[✔]</> Optimized caches cleared successfully.');
        } catch (\Exception $e) {
            $this->error('[✘] Failed to clear optimized caches: ' . $e->getMessage());
        }

        $this->info('Project reset process completed.');
        return Command::SUCCESS;
    }
}